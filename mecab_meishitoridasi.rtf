{\rtf1\ansi\ansicpg932\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset128 HiraginoSans-W3;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 from natto import MeCab\
\
mc = MeCab()\
\
# 
\f1 \'83\'65\'83\'4c\'83\'58\'83\'67\'82\'cd
\f0  cookbiz.jp 
\f1 \'82\'e6\'82\'e8
\f0 \
text = "
\f1 \'82\'a8\'8e\'64\'8e\'96\'82\'c9\'82\'c2\'82\'a2\'82\'c4\'82\'cd\'8a\'ee\'96\'7b\'93\'49\'82\'c9\'82\'cd\'93\'58\'95\'dc\'82\'c9\'94\'7a\'91\'ae\'82\'b5\'82\'c4\'82\'a9\'82\'e7\'82\'cc
\f0 OJT
\f1 \'82\'aa\'92\'86\'90\'53\'82\'c6\'82\'c8\'82\'e8\'82\'dc\'82\'b7\'82\'aa\'81\'41\'90\'e6\'94\'79\'83\'58\'83\'5e\'83\'62\'83\'74\'82\'aa\'82\'b5\'82\'c1\'82\'a9\'82\'e8\'82\'c6\'83\'54\'83\'7c\'81\'5b\'83\'67\'82\'b5\'82\'c4\'82\'ad\'82\'ea\'82\'e9\'82\'cc\'82\'c5\'81\'41\'82\'c7\'82\'c8\'82\'bd\'82\'e0\'88\'c0\'90\'53\'82\'b5\'82\'c4\'82\'a8\'8e\'64\'8e\'96\'82\'b5\'82\'c4\'82\'a2\'82\'bd\'82\'be\'82\'af\'82\'dc\'82\'b7\'81\'42
\f0 2013
\f1 \'94\'4e\'82\'c9\'82\'cd\'96\'7b\'8e\'d0\'93\'e0\'82\'c9\'8a\'4a\'94\'ad\'8e\'ba\'82\'f0\'90\'dd\'92\'75\'81\'42\'93\'58\'95\'dc\'94\'7a\'91\'ae\'91\'4f\'82\'c9\'82\'e0\'83\'67\'83\'8c\'81\'5b\'83\'6a\'83\'93\'83\'4f\'82\'f0\'8d\'73\'82\'c8\'82\'c1\'82\'c4\'82\'a9\'82\'e7\'8e\'c0\'8d\'db\'82\'cc\'93\'58\'95\'dc\'82\'c9\'94\'7a\'91\'ae\'82\'b3\'82\'ea\'82\'e9\'82\'c8\'82\'c7\'81\'41\'83\'54\'83\'7c\'81\'5b\'83\'67\'91\'cc\'90\'a7\'82\'aa\'82\'b5\'82\'c1\'82\'a9\'82\'e8\'82\'c6\'90\'ae\'82\'c1\'82\'c4\'82\'a2\'82\'e9\'82\'cc\'82\'e0\'93\'96\'8e\'d0\'82\'cc\'96\'a3\'97\'cd\'81\'42\'8e\'c0\'8d\'db\'81\'41\'8c\'6f\'8c\'b1\'82\'aa\'90\'f3\'82\'a2\'95\'fb\'82\'e2\'96\'a2\'8c\'6f\'8c\'b1\'83\'58\'83\'5e\'81\'5b\'83\'67\'82\'cc\'83\'58\'83\'5e\'83\'62\'83\'74\'82\'e0\'91\'bd\'90\'94\'8a\'88\'96\'f4\'92\'86\'81\'49
\f0 "\
\
print ('Input text:\\n'+text)\
\
print('====================================================')\
\
# -F / --node-format 
\f1 \'83\'49\'83\'76\'83\'56\'83\'87\'83\'93\'82\'c5\'83\'6d\'81\'5b\'83\'68\'82\'cc\'8f\'6f\'97\'cd\'83\'74\'83\'48\'81\'5b\'83\'7d\'83\'62\'83\'67\'82\'f0\'8e\'77\'92\'e8\'82\'b7\'82\'e9
\f0 \
#\
# %m    ... 
\f1 \'8c\'60\'91\'d4\'91\'66\'82\'cc\'95\'5c\'91\'77\'95\'b6
\f0 \
# %f[0] ... 
\f1 \'95\'69\'8e\'8c
\f0 \
# %h    ... 
\f1 \'95\'69\'8e\'8c
\f0  ID (IPADIC)\
# %f[8] ... 
\f1 \'94\'ad\'89\'b9
\f0 \
#\
words = []\
with MeCab('-F%m,%f[0],%h') as nm:\
    for n in nm.parse(text, as_nodes=True):\
        node = n.feature.split(',');\
        if len(node) != 3:\
            continue\
        if node[1] == '
\f1 \'96\'bc\'8e\'8c
\f0 ':\
            # if True:\
            words.append(node[0])\
print(words)}